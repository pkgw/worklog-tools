#! /usr/bin/env python
# -*- mode: python ; coding: utf-8 -*-
# Copyright 2014 Peter Williams <peter@newton.cx>
# Licensed under the GNU General Public License, version 3 or higher.

"""usage: wltool <command> [arguments...]

workog commands are:

  bootstrap-bibtex  Stub publication records from an ADS BibTeX file
  extract           Print out worklog records of a specific type
  html              Fill in an HTML-formatted template
  latex             Fill in a LaTeX-formatted template
  summarize         Summarize the records present in the worklog data files
  update-cites      Update ADS citation counts in the worklog data files

Running 'wltool <command> --help' may give more information on the command
in question."""

from worklog import *


def cli_bootstrap_bibtex (argv):
    """usage: wltool bootstrap-bibtex <bibtex-file> <your-surname> <output-dir>

Create a new set of worklog files, seeding them with publication information
gathered from from <bibtex-file>. Specify <your-surname> to assist in guessing
of the "mypos" field (your position in the author list). The output directory
<output-dir> must not exist when you run the program; this is to avoid
accidental overwriting of existing files.

Search the output files for "XXX" to find issues that need manual attention.

WARNING: the current implementation assumes that the file is one from ADS.
Parsing files from other origins will probably fail."""

    import os.path

    # note: we'll leave the output directory lying around if we die. I figure
    # that could be helpful for debugging.

    if len (argv) != 4 or '--help' in argv:
        print cli_bootstrap_bibtex.__doc__
        raise SystemExit (1)

    bibpath = argv[1]
    mysurname = argv[2]
    outdir = argv[3]

    try:
        os.mkdir (outdir)
    except Exception as e:
        die ('cannot create output directory "%s": %s (%s)', outdir,
             e, e.__class__.__name__)

    with open (bibpath) as bibfile:
        bootstrap_bibtex (bibfile, outdir, mysurname)


def _cli_render (argv):
    fmtname = argv[0]

    if len (argv) not in (2, 3):
        die ('usage: wltool %s <template> [datadir]', fmtname)

    tmpl = argv[1]

    if len (argv) < 3:
        datadir = '.'
    else:
        datadir = argv[2]

    if fmtname == 'latex':
        render = render_latex
    elif fmtname == 'html':
        render = render_html
    else:
        die ('unknown output format "%s"', fmtname)

    context, commands = setup_processing (render, datadir)

    with open (tmpl) as f:
        for outline in process_template (f, commands, context):
            print outline.encode ('utf8')


cli_latex = _cli_render
cli_html = _cli_render


def cli_extract (argv):
    from inifile import write
    import sys

    if len (argv) not in (2, 3):
        die ('usage: wltool extract <section-name> [datadir]')

    sectname = argv[1]

    if len (argv) < 3:
        datadir = '.'
    else:
        datadir = argv[2]

    write (sys.stdout, (i for i in load (datadir) if i.section == sectname))


def cli_summarize (argv):
    if len (argv) not in (1, 2):
        die ('usage: wltool summarize [datadir]')

    if len (argv) < 2:
        datadir = '.'
    else:
        datadir = argv[1]

    counts = {}
    maxsectlen = 0

    for i in load (datadir):
        counts[i.section] = counts.get (i.section, 0) + 1
        maxsectlen = max (maxsectlen, len (i.section))

    for section, count in sorted (counts.iteritems ()):
        print '% *s: %d' % (maxsectlen, section, count)


_update_minwait = 7 * 24 * 3600 # 1 week

def cli_update_cites (argv):
    if len (argv) not in (1, 2):
        die ('usage: wltool update-cites [datadir]')

    if len (argv) < 2:
        datadir = '.'
    else:
        datadir = argv[1]

    import time
    from inifile import mutateInPlace

    now = int (time.time ())
    nowstr = time.strftime ('%Y/%m/%d ', time.gmtime (now))

    for path in list_data_files (datadir):
        for item in mutateInPlace (path):
            if not item.data.has ('bibcode'):
                continue

            bibcode = item.data.bibcode
            firstauth = item.data.has ('mypos') and int (item.data.mypos) == 1
            reffed = item.data.has ('refereed') and item.data.refereed == 'y'

            if not item.data.has ('adscites'):
                lastupdate = curcites = 0
            else:
                try:
                    a = item.data.adscites.split ()[:2]
                    y, m, d = [int (x) for x in a[0].split ('/')]
                    lastupdate = time.mktime ((y, m, d, 0, 0, 0, 0, 0, 0))
                    curcites = int (a[1])
                except Exception:
                    warn ('cannot parse adscites entry: %s', item.data.adscites)
                    continue

            if lastupdate + _update_minwait > now:
                continue

            print bibcode, ' *'[firstauth] + ' R'[reffed], '...',
            newcites = get_ads_cite_count (bibcode)
            item.set ('adscites', nowstr + str (newcites))
            print '%d (%+d)' % (newcites, newcites - curcites)


# The dispatcher

if __name__ == '__main__':
    import sys

    if len (sys.argv) < 2 or sys.argv[1] == '--help':
        print __doc__
        raise SystemExit (0)

    cmdname = sys.argv[1]
    clicmd = globals ().get ('cli_' + cmdname.replace ('-', '_'))

    if not callable (clicmd):
        die ('unknown subcommand "%s"; run this program without arguments '
             'for usage help', cmdname)

    clicmd (sys.argv[1:])
